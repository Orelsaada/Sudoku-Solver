row0 = [1, 9, 2, 0, 0, 7, 0, 4, 5]
row1 = [0, 0, 0, 0, 0, 3, 8, 0, 1]
row2 = [8, 0, 0, 0, 1, 4, 0, 0, 9]

row3 = [0, 0, 5, 0, 3, 0, 6, 2, 0]
row4 = [0, 2, 1, 0, 5, 0, 0, 0, 7]
row5 = [0, 4, 0, 7, 6, 0, 0, 1, 0]

row6 = [4, 7, 0, 3, 0, 5, 0, 0, 0]
row7 = [0, 0, 8, 9, 0, 0, 7, 5, 0]
row8 = [3, 0, 0, 8, 0, 1, 4, 9, 0]
rows = [row0, row1, row2, row3, row4, row5, row6, row7,  row8]


# Printing the board.
def show_board(board):
    for j in range(len(rows)):
        if j % 3 == 0 and j != 0:
            print("------------------")
        for i in range(len(row0)):
            if i % 3 == 0 and i != 0:
                print(" ", end="")
            if i < len(row0) - 1:
                print(f'{rows[j][i]}|', end="")
            else:
                print(f'{rows[j][i]}', end="")
        print()

# Find the position of an "empty" square (place with no number - represent as 0).
def find_empty():
    for i in range(len(rows)):
        for j in range(len(row0)):
            if rows[i][j] == 0:
                return i, j  # returns row_num, col_num.


# Checks if number in certain position is valid (once in row, once in column, once in 3x3 square).
def valid(num, pos, board):
    # Row
    if num in board[pos[0]]:
        return False

    # Column
    for i in range(len(rows)):
        if num == board[i][pos[1]]:
            return False

    # Square
    square_x = pos[1] // 3
    square_y = pos[0] // 3

    for i in range(square_y * 3, square_y * 3 + 3):
        for j in range(square_x * 3, square_x * 3 + 3):
            if num == board[i][j]:
                return False

    return True

# Main function. set a valid number and try to solve the board with it (using recrusion), if fails - backtrack and try to set another valid number.
def solve(board):
    find = find_empty()
    if not find:
        return True

    else:
        row, col = find
        for i in range(1, 10):
            if valid(i, (row, col), board):
                board[row][col] = i

                if solve(board):
                    return True
        return False

# Showing the board before and after.
show_board(rows)
print("\n=====solving======\n")
solve(rows)
show_board(rows)
